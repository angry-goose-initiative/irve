/**
 * File:    irve.dts
 * Brief:   The IRVE Device Tree for the Linux kernel
 * 
 * Copyright (C) 2023-2024 John Jekel
 * See the LICENSE file at the root of the project for licensing info.
 * 
 * AFTER COMPILING THIS with `dtc`, IT IS IMPERATIVE IT IS PLACED IN MEMORY AT
 * A LOCATION ALIGNED TO 8 BYTES. THIS TOOK ME FOREVER TO FIGURE OUT. DON'T BE ME.
 *
 * Compile with `dtc ./irve.dts -o ./irve.dtb`
 *
 * Partialy based on https://github.com/cnlohr/mini-rv32ima/blob/master/configs/minimal.dts
 * Also useful: https://github.com/riscv-non-isa/riscv-device-tree-doc/blob/master/bindings/riscv/cpus.txt
 * https://github.com/westerndigitalcorporation/RISC-V-Linux/blob/master/linux/Documentation/devicetree/bindings/interrupt-controller/riscv%2Ccpu-intc.txt
 * https://github.com/PiMaker/rvc/blob/master/dts.dts
 *
 * Useful about timer stuffs:
 * https://patchwork.kernel.org/project/linux-riscv/cover/20211007123632.697666-1-anup.patel@wdc.com/
 *
 * FIXME for S-mode using the SBI instead of the clint, we may need to advertize SBI features via a (seperate) device tree,
 * ex. using the riscv,timer device tree property
 *
*/

/dts-v1/;

/ {
    #address-cells = <1>;
    #size-cells = <1>;
    model = "qemu";

    cpus {
        #address-cells = <0x01>;
        #size-cells = <0x00>;
        timebase-frequency = <1000>;//mtime ticks at 1kHz
        //timebase-frequency = <0x1000000>;//Pretend mtime tick quite fast to avoid messing things up

        cpu@0 {
            phandle = <0x01>;
            device_type = "cpu";
            reg = <0x00000000>;/* mhartid is 0 */
            status = "okay";/* The CPU begins online */
            compatible = "riscv";
            riscv,isa = "rv32ima";/* TODO do we need to specify zicsr, zifencei, etc as well? */
            mmu-type = "riscv,sv32";
            clock-frequency = <0>; /* TODO what is this? */
            riscv,isa-base = "rv32i";
            riscv,isa-extensions = "i", "m", "a", "zifencei", "zicsr";

            /* The "Hart Level Interrupt Controller" (aka the built-in CPU interrupt controller with 3 sources) */
            hlic: interrupt-controller {
                #address-cells = <0x01>;
                #interrupt-cells = <1>;
                compatible = "riscv,cpu-intc";
                interrupt-controller;
                /* phandle = <0x02>; */
            };
        };

         cpu-map {
            cluster0 {
                core0 {
                    cpu = <0x01>;
                };
            };
        };
    };

    memory@80000000 {
        device_type = "memory";
        reg = <0x80000000 0x4000000>;
    };

    uart0: uart@f1000000 {
        //interrupts-extended = <&hlic 0x9>;//Connects to the standard RISC-V interrupt lines
        clock-frequency = <0x384000>;
        reg = <0xf1000000 0x8>;
        compatible = "ns8250";
        //compatible = "ns16650a";
        //compatible = "ns16850";
    };

    soc {
        #address-cells = <1>;
        #size-cells = <1>;
        compatible = "simple-bus";
        ranges;

        clint@f0000000 {
            interrupts-extended = <&hlic 0x3 &hlic 0x7>;//Connects to the standard RISC-V interrupt lines
            reg = <0xf0000000 0xbfff>;
            compatible = "riscv,clint0";
        };

        /* TODO add other things we may need (ex. the UART) */
    };
};
