/**
 * @file    rvsw_verifier.cpp.in
 * @brief   Tests IRVE with RVSW
 * 
 * @copyright
 *  Copyright (C) 2023-2024 John Jekel\n
 *  See the LICENSE file at the root of the project for licensing info.
 *
 * Uses compiled testfiles to test IRVE (may look at internal state like unit tests, but evaluates the entire
 * program like integration tests)
 *
*/

/* ------------------------------------------------------------------------------------------------
 * Includes
 * --------------------------------------------------------------------------------------------- */

#include <iostream>
#undef NDEBUG//Asserts should work even in release mode for tests
#include <cassert>
#include <cstdlib>
#include <ctime>
#include <string>
#include <unordered_map>

/* ------------------------------------------------------------------------------------------------
 * Constants/Defines
 * --------------------------------------------------------------------------------------------- */

//CMake will populate this
#define TEST_LIST @RVSW_TEST_LIST@

/* External Function Declarations */

#define X(test_name) extern int verify_##test_name();
TEST_LIST
#undef X

#define X(test_name) {#test_name, verify_##test_name},
const std::unordered_map<std::string, int (*)()> TEST_MAP = {
    TEST_LIST
};
#undef X

/* ------------------------------------------------------------------------------------------------
 * Function Implementations
 * --------------------------------------------------------------------------------------------- */

int main(int argc, char** argv) {
    assert(argc == 2 && "Incorrect number of arguments. Usage: rvsw_verifier test_to_run");

    //Initialize random number generator for tests that use it
    srand(time(NULL));
    
    //Lookup the test to run and run it
    auto test = TEST_MAP.find(argv[1]);
    assert((test != TEST_MAP.end()) && "Test not found. Check the spelling and that it is in TEST_LIST");
    std::cout << "Running the rvsw test called: \"" << argv[1] << "\"" << std::endl;
    return test->second();
}
